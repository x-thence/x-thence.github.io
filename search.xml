<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>封装svg图标组件，提高开发效率</title>
      <link href="/2022/06/12/%E5%B0%81%E8%A3%85svg%E5%9B%BE%E6%A0%87%E7%BB%84%E4%BB%B6%EF%BC%8C%E6%8F%90%E5%8D%87%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/"/>
      <url>/2022/06/12/%E5%B0%81%E8%A3%85svg%E5%9B%BE%E6%A0%87%E7%BB%84%E4%BB%B6%EF%BC%8C%E6%8F%90%E5%8D%87%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>最近在工作中遇到了开发菜单栏配置图标的需求，拿到手的是一堆svg图标文件，但是我不想每次引入icon的时候都写一大堆:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/long/path/to/your/svg/icon.svg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>很长很长的地址…我觉得最简单的形式还是像饿了么那些UI库一样，直接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">name</span>=<span class="string">&quot;icon-file-name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写个文件名就能引入我的icon了。<br>OK, 以上就是我们的理想模式。So, let’s go!</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>网上搜寻了一圈，一个简单的解决方案是 —— svg 雪碧图。</p><p>它的工作原理是: 利用svg的symbol元素，将每个icon包括在symbol中，通过use元素使用该symbol.</p><p>我们这里简单一点的解释就是，最终你的svg icon会变成下面这个样子的 svg 雪碧图:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">id</span>=<span class="string">&quot;__SVG_SPRITE_NODE__&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">symbol</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">id</span>=<span class="string">&quot;icon名&quot;</span>&gt;</span>&#123;&#123;省略的icon path&#125;&#125;<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">symbol</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">id</span>=<span class="string">&quot;icon名&quot;</span>&gt;</span>&#123;&#123;省略的icon path&#125;&#125;<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你的每一个icon都对应着一个symbol元素。然后在你的html中，引入这样的svg, 随后通过use在任何你需要icon的地方指向symbol:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#symbolId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个过程中，我们可以把symbol理解为sketch中内置的图形，当你需要使用的时候，把这个形状”拖拽”到你的画板中就行了。而use就是这个过程中的”拖拽”行为。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>要让我们自己生成上面那样的svg雪碧图——肯定是不可能的咯！<br>恩，你一定想到了，肯定有工具！当然你最常用的应该是webpack的工具吧，这里拿好！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svg-sprite-loader</span><br></pre></td></tr></table></figure><p>svg-sprite-loader会把你的icon塞到一个个symbol中，symbol的id如果不特别指定，就是你的文件名。它最终会在你的html中嵌入这样一个svg，<br>你就可以像上面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#symbolId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br></pre></td></tr></table></figure><p>随意使用你的icon咯。</p><p>svg-sprite-loader配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;svg-sprite-loader&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一点需要注意的是，我们并不是所有的svg都要放在我们的雪碧图里，有的也许我就想当做图片用。这时候在我们的webpack配置中，我们需要对这两种svg区别对待。<br>首先，我们要把所有要作为icon的svg团结在一起，放在某个文件夹中，例如assets/icons。其他的svg就随你便啦。</p><p>然后对于想要用作图片的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">  <span class="attr">exclude</span>: path.resolve(__dirname, <span class="string">&#x27;./src/assets/icons&#x27;</span>) <span class="comment">// 不带icon 玩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于用作icon的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;svg-sprite-loader&#x27;</span>,</span><br><span class="line">  <span class="attr">include</span>: path.resolve(__dirname, <span class="string">&#x27;./src/assets/icons&#x27;</span>) <span class="comment">// 只带自己人玩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，这俩就分道扬镳啦。</p><p>组件化<br>OK, 我们的问题已经解决了一半，不用每次都写路径引入svg文件了。<br>但是。。。我们现在要每次都写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#symbolId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我！不！干！！！而且也没达到我们最初的目的。<br>所以，我们肯定把上面的那一坨写成一个组件咯：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> IconSvg = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; name, styles, svgClass &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">:class</span>=<span class="string">&quot;svgClass&quot;</span> &#123;<span class="attr">...styles</span>&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">use</span> <span class="attr">:xlink:href</span>=<span class="string">&quot;`#$&#123;name&#125;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后，你就达成目标，这样使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;your-icon.svg&#x27;</span>;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">icon</span> <span class="attr">name</span>=<span class="string">&quot;your-icon-name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如果你想修改图标的颜色，直接设置该元素的<code>fill/stroke</code>属性。如果设置了这些属性没有反应的话，emmm…可能需要你的设计师重新切图</p><p>引入所有Icon文件<br>上面我们的基本功能已经完成了，还有最后一个小小的问题——我每次引用一个文件的时候就得import一下，这肯定也不满足我们偷懒的最终目标。<br>不过，总会有人比你更懒，或者总会有人比你先懒。在这里，我们可以使用webpack的<code>require.contextAPI</code>来动态引入你所有的Icon.</p><p>现在我们是不能动态引入模块，但是webpack为我们提供了相关功能，webpack) 允许我们使用表达式动态引入模块。比如：<code>require(&#39;./template/&#39; + name + &#39;.ejs&#39;)</code>;，此时webpack会生成一个<code>context module</code></p><p>A context module is generated. It contains references to all modules in that directory that can be required with a request matching the regular expression. The context module contains a map which translates requests to module ids.<br>它会被抽象成以下信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;./table.ejs&quot;</span>: <span class="number">42</span>, <span class="comment">// key 是module, value 是module id</span></span><br><span class="line">  <span class="string">&quot;./table-row.ejs&quot;</span>: <span class="number">43</span>,</span><br><span class="line">  <span class="string">&quot;./directory/folder.ejs&quot;</span>: <span class="number">44</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，我们可以利用webpack提供的的<code>require.contextAPI</code> 来创建自己的<code>context module</code>动态引入icon。它接受三个参数，第一个是文件夹，第二个是是否使用子文件，第三个是文件匹配的正则。<br><code>require.context(directory, useSubdirectories = false, regExp = /^\.\//)</code><br>对于我们的项目来说，我们需要动态引入的就是<code>require.context(&#39;./src/assets/icons&#39;, false, /\.svg/)</code>.</p><p><code>require.context</code>会返回一个函数，并且该函数有<code>keys()，id， resolve()</code> 属性。</p><p><code>keys()</code>方法返回的该模块可以处理的所有可能请求的模块的数组，简单一点就是满足该参数的模块；<br><code>resolve()</code>返回的是请求的module的id;<br>id是该<code>context module</code>的id;<br>总的来说，就是说<code>require.context</code>帮我们创建一个上下文，比如在这里我们的上下文就是<code>./src/assets/icons</code>, 随后我们就可以通过<code>request.resolve(&#39;./store.svg&#39;)</code>来引入该上下文内的文件了。</p><p>我们打印一下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>.context(<span class="string">&#x27;./assets/icons&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.svg$/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(request);</span><br><span class="line"><span class="built_in">console</span>.log(request.keys());</span><br><span class="line"><span class="built_in">console</span>.log(request.id);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;request.resolve()&#x27;</span>, request.resolve(<span class="string">&#x27;./store.svg&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(request.resolve);</span><br><span class="line">得到的结果是：</span><br><span class="line"></span><br><span class="line"><span class="comment">// request</span></span><br><span class="line"><span class="function"><span class="title">webpackContext</span>(<span class="params">req</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id = webpackContextResolve(req);</span><br><span class="line">    <span class="keyword">return</span> __webpack_require__(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// request.keys()</span></span><br><span class="line">[<span class="string">&quot;./airbloom.svg&quot;</span>, <span class="string">&quot;./crown.svg&quot;</span>, <span class="string">&quot;./store.svg&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// request.id</span></span><br><span class="line">./src/assets/icons sync \.svg$</span><br><span class="line"></span><br><span class="line"><span class="comment">// request.resolve(&#x27;./store.svg&#x27;);</span></span><br><span class="line">./src/assets/icons/store.svg</span><br><span class="line"></span><br><span class="line"><span class="comment">// request.resolve</span></span><br><span class="line"><span class="function"><span class="title">webpackContextResolve</span>(<span class="params">req</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id = map[req];</span><br><span class="line">    <span class="keyword">if</span>(!(id + <span class="number">1</span>)) &#123; <span class="comment">// check for number or string</span></span><br><span class="line">        <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Cannot find module &#x27;&quot;</span> + req + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        e.code = <span class="string">&#x27;MODULE_NOT_FOUND&#x27;</span>;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="引入全部的svg图标"><a href="#引入全部的svg图标" class="headerlink" title="引入全部的svg图标"></a>引入全部的svg图标</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.context(<span class="string">&#x27;./assets/icons&#x27;</span>,<span class="literal">false</span>,<span class="regexp">/\.svg$/</span>)</span><br><span class="line"><span class="built_in">console</span>.log(req.keys());</span><br><span class="line">req.keys().map(req);</span><br></pre></td></tr></table></figure><p>最后在入口文件中引入即可；</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原理：</p><ul><li>symbol + use:xlink:href;</li><li>svg-sprite-loader生成雪碧图;</li><li>require.context动态引入所有文件；</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈前端安全常见问题</title>
      <link href="/2021/11/15/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2021/11/15/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>近年来，随着互联网的高速发展，信息安全问题已经成为企业最为关注的焦点之一，而前端又是引发企业安全问题的高危据点，并且成了前端面试中高频的面试题目，本文将对常见的几种前端安全问题进行梳理</p></blockquote><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><h3 id="XSS的基本概念"><a href="#XSS的基本概念" class="headerlink" title="XSS的基本概念"></a>XSS的基本概念</h3><ul><li><code>XSS（Cross Site Scripting）</code>：中文名叫<code>跨域脚本攻击</code>,为了和 <code>CSS</code> 区分，这里把攻击的第一个字母改成了 <code>X</code>，于是叫做 <code>XSS</code></li></ul><h3 id="XSS的攻击原理"><a href="#XSS的攻击原理" class="headerlink" title="XSS的攻击原理"></a>XSS的攻击原理</h3><ul><li><code>XSS</code> 的本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行</li><li><code>XSS</code>攻击的核心原理通俗点来讲就是：不需要你做任何的登录认证，它会通过合法的操作（比如在<code>url</code>中输入、在评论框中输入），向你的页面注入脚本（可能是<code>js、hmtl</code>代码块等）</li><li>举个例子，公司需要一个搜索页面，根据 <code>URL</code> 参数决定关键词的内容，代码如下：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;%= getParameter(&quot;</span><span class="attr">keyword</span>&quot;) %&gt;</span>&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  您搜索的关键词是：&lt;%= getParameter(&quot;keyword&quot;) %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>可是，当浏览器请求<code>http://xxx/search?keyword=&quot;&gt;&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code>时，服务端会解析出请求参数<code>keyword</code>，得到<code>&quot;&gt;&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code>，拼接到 HTML 中返回给浏览器。形成了如下的 HTML：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;XSS&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  您搜索的关键词是：&quot;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;XSS&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>浏览器无法分辨出 <code>&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt; </code>是恶意代码，因而将其执行</li><li><code>XSS</code>的攻击最后导致的结果可能是：<ul><li><code>盗用Cookie</code></li><li><code>破坏页面的正常结构，插入广告等恶意内容</code></li><li><code>D-doss攻击</code></li></ul></li></ul><h3 id="XSS的攻击方式"><a href="#XSS的攻击方式" class="headerlink" title="XSS的攻击方式"></a>XSS的攻击方式</h3><ul><li><p><code>反射型</code><br>反射型 XSS 的攻击步骤：</p><ol><li>攻击者构造出特殊的 URL，其中包含恶意代码。</li><li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ol></li></ul><blockquote><p>发出请求时，<code>XSS</code>代码出现在<code>url</code>中，作为输入提交到服务器端，服务器端解析后响应，<code>XSS</code>代码随响应内容一起传回给浏览器，最后浏览器解析执行<code>XSS</code>代码。这个过程像一次反射，所以叫反射型<code>XSS</code></p></blockquote><ul><li><p><code>存储型</code><br>存储型 XSS 的攻击步骤：</p><ol><li>攻击者将恶意代码提交到目标网站的数据库中。</li><li>用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ol></li></ul><blockquote><p>存储型<code>XSS</code>和反射型<code>XSS</code>的差别在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求时目标页面时不用再提交<code>XSS</code>代码</p></blockquote><ul><li><p><code>DOM 型</code><br>DOM 型 XSS 的攻击步骤：</p><ol><li>攻击者构造出特殊的 URL，其中包含恶意代码。</li><li>用户打开带有恶意代码的 URL。</li><li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ol></li></ul><blockquote><p>DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞</p></blockquote><h3 id="XSS的防范措施"><a href="#XSS的防范措施" class="headerlink" title="XSS的防范措施"></a>XSS的防范措施</h3><blockquote><p>XSS的防范措施主要有三个</p></blockquote><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><ul><li>对用户输入的数据进行<code>HTML Entity</code>编码</li></ul><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><ul><li>移除用户输入的和事件相关的属性。如<code>onerror</code>可以自动触发攻击，还有<code>onclick</code>等。（总而言是，过滤掉一些不安全的内容）</li><li>移除用户输入的<code>Style</code>节点、<code>Script</code>节点、<code>Iframe</code>节点。（尤其是<code>Script</code>节点，它可是支持跨域的呀，一定要移除</li></ul><h4 id="校正"><a href="#校正" class="headerlink" title="校正"></a>校正</h4><ul><li>避免直接对<code>HTML Entity</code>进行解码</li><li>使用<code>DOM Parse</code>转换，校正不配对的<code>DOM</code>标签<blockquote><p>备注：我们应该去了解一下<code>DOM Parse</code>这个概念，它的作用是把文本解析成<code>DOM</code>结构<br>比较常用的做法是，通过第一步的编码转成文本，然后第三步转成<code>DOM</code>对象，然后经过第二步的过滤</p></blockquote></li></ul><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="CSRF的基本概念、缩写、全称"><a href="#CSRF的基本概念、缩写、全称" class="headerlink" title="CSRF的基本概念、缩写、全称"></a>CSRF的基本概念、缩写、全称</h3><p><code>CSRF（Cross-site request forgery）：跨站请求伪造</code></p><h3 id="CSRF的攻击原理"><a href="#CSRF的攻击原理" class="headerlink" title="CSRF的攻击原理"></a>CSRF的攻击原理</h3><p><img "" class="lazyload placeholder" data-original="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8fb294daf74d486f84a9d9b2c1393850~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="17.png"></p><blockquote><p>用户是网站A的注册用户，且登录进去，于是网站A就给用户下发cookie<br>从上图可以看出，要完成一次CSRF攻击，受害者必须满足两个必要的条件：</p></blockquote><p><code>1. 登录受信任网站A，并在本地生成Cookie。（如果用户没有登录网站A，那么网站B在诱导的时候，请求网站A的api接口时，会提示你登录）</code><br><code>2. 在不登出A的情况下，访问危险网站B（其实是利用了网站A的漏洞）</code></p><blockquote><p>我们在讲<code>CSRF</code>时，一定要把上面的两点说清楚<br>温馨提示一下，<code>cookie</code>保证了用户可以处于登录状态，但网站B其实拿不到 <code>cookie</code><br>举个例子，前段时间里，微博网站有个<code>api</code>接口有漏洞，导致很多用户的粉丝暴增</p></blockquote><h3 id="CSRF的防范措施"><a href="#CSRF的防范措施" class="headerlink" title="CSRF的防范措施"></a>CSRF的防范措施</h3><h4 id="方法一、Token-验证：（用的最多）"><a href="#方法一、Token-验证：（用的最多）" class="headerlink" title="方法一、Token 验证：（用的最多）"></a>方法一、Token 验证：（用的最多）</h4><ol><li>服务器发送给客户端一个<code>token</code></li><li>客户端提交的表单中带着这个<code>token</code></li><li>如果这个 <code>token</code> 不合法，那么服务器拒绝这个请求</li></ol><h4 id="方法二：隐藏令牌："><a href="#方法二：隐藏令牌：" class="headerlink" title="方法二：隐藏令牌："></a>方法二：隐藏令牌：</h4><ul><li>把 <code>token</code> 隐藏在 <code>http</code> 的 <code>head</code>头中</li></ul><blockquote><p>方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别</p></blockquote><h4 id="方法三、Referer-验证："><a href="#方法三、Referer-验证：" class="headerlink" title="方法三、Referer 验证："></a>方法三、Referer 验证：</h4><blockquote><p>Referer 指的是页面请求来源。意思是，只接受本站的请求，服务器才做响应；如果不是，就拦截</p></blockquote><h2 id="CSRF-和-XSS-的区别"><a href="#CSRF-和-XSS-的区别" class="headerlink" title="CSRF 和 XSS 的区别"></a>CSRF 和 XSS 的区别</h2><h4 id="区别一："><a href="#区别一：" class="headerlink" title="区别一："></a>区别一：</h4><ul><li><code>CSRF</code>：需要用户先登录网站<code>A</code>，获取 <code>cookie</code></li><li><code>XSS</code>：不需要登录</li></ul><h4 id="区别二：（原理的区别）"><a href="#区别二：（原理的区别）" class="headerlink" title="区别二：（原理的区别）"></a>区别二：（原理的区别）</h4><ul><li><code>CSRF</code>：是利用网站<code>A</code>本身的漏洞，去请求网站<code>A</code>的<code>api</code></li><li><code>XSS</code>：是向网站 <code>A </code>注入 <code>JS</code>代码，然后执行 <code>JS</code> 里的代码，篡改网站<code>A</code>的内容</li></ul><h2 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h2><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><ul><li>用户亲手操作</li><li>用户不知情</li><li>获取用户敏感信息</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>点击劫持就是将一个危险网站设置透明<code>（opticy: 0 ）</code>，然后在其上方设置一个按钮，当你点击这个按钮的时候，就会触发底部恶意网站的某些事件</p><h3 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h3><h4 id="设置http响应头-X-Frame-Options"><a href="#设置http响应头-X-Frame-Options" class="headerlink" title="设置http响应头 X-Frame-Options"></a>设置http响应头 <code>X-Frame-Options</code></h4><blockquote><p><code>X-Frame-Options HTTP</code> 响应头是用来给浏览器指示允许一个页面可否在<code>&lt;frame&gt;</code>, <code>&lt;iframe&gt;</code>或者 <code>&lt;object&gt; </code>中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去</p></blockquote><h4 id="防嵌套网页"><a href="#防嵌套网页" class="headerlink" title="防嵌套网页"></a>防嵌套网页</h4><blockquote><p>可以使用<code>window.top</code>来防止你的网页被<code>iframe</code>,</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span> != <span class="built_in">window</span>.top)&#123; <span class="comment">// 如果返回false –&gt; 说明页面被嵌套在iframe中了</span></span><br><span class="line">    <span class="built_in">window</span>.top.location.href = correctURL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><blockquote><p>在面对存在验证码的页面时，用户看不到这个透明页面，肯定是不会输入验证码的，在危险操作位置布置验证码认证，就可以防止点击劫持造成危害</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用TypeScript制作爬虫小案例</title>
      <link href="/2021/10/08/%E4%BD%BF%E7%94%A8TypeScript%E5%88%B6%E4%BD%9C%E7%88%AC%E8%99%AB%E5%B0%8F%E6%A1%88%E4%BE%8B/"/>
      <url>/2021/10/08/%E4%BD%BF%E7%94%A8TypeScript%E5%88%B6%E4%BD%9C%E7%88%AC%E8%99%AB%E5%B0%8F%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>最近接触到typescript，学习了一些基础的知识，刚好又是周末有时间，想着能不能用ts来做点什么东西。看到别的小伙伴有用它来写爬虫的，刚好自己也对这块比较感兴趣，就也试着写了一个简单的爬虫，今天跟大家分享下。</p></blockquote><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>写爬虫之前我们需要做一些准备工作，下面一起来看一下：</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>下图是我们本次要爬取的内容，要求获取到每门课程的信息并最终写入到一个json文件中；<br><a href="https://coding.imooc.com/?c=fe&sort=0&unlearn=0&page=1">目标网址</a>。</p><p><img "" class="lazyload placeholder" data-original="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/679a1650849143a780796c656f4462ff~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>我们先创建一个新文件夹依次执行以下命令<br>初始化项目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>生成typescript配置文件tsconfig.json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>安装typescript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -D</span><br></pre></td></tr></table></figure><p>下面再安装一些项目中所需要的模块</p><ul><li>ts-node(省去编译ts这一步骤，方便调试)</li><li>superagent(用来发送请求)</li><li>cheerio（用来解析获取到的html结构）</li></ul><p>相应的，要安装一下对应的类型声明模块，有的小伙伴可能还不清楚是什么意思，举个例子来说，就是superagent是用js来写的，但在我们的typescript中并不能识别它，需要一个翻译文件，这个翻译文件在这就叫做与它对应的类型声明模块<br><br>我们安装下这两个类型声明模块：</p><ul><li>@types/superagent</li><li>@types/cheerio</li></ul><p>上面列出的这写依赖安装完成后，我们的环境搭建基本就算完成了</p><h3 id="项目启动测试"><a href="#项目启动测试" class="headerlink" title="项目启动测试"></a>项目启动测试</h3><p>我们修改下package.json的scripts配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;ts-node ./src/app.ts&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>然后新建一个src目录，在src目录下创建一个<code>app.ts</code>文件，并在里面写入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我想写爬虫&#x27;</span>);</span><br></pre></td></tr></table></figure><p>然后运行<code>npm run dev</code>，能够看到输出了<code>我想写爬虫</code>就表示没有问题了</p><h2 id="分析网页并抓取数据"><a href="#分析网页并抓取数据" class="headerlink" title="分析网页并抓取数据"></a>分析网页并抓取数据</h2><h3 id="分析网页标签结构"><a href="#分析网页标签结构" class="headerlink" title="分析网页标签结构"></a>分析网页标签结构</h3><p>开始写爬虫之前我们需要对我们的目标网页进行结构分析，观察我们所需要的信息存储在那些标签之中，可能让我们更准确的就行爬取；拿我们的这个例子来说，我们随便选择一门课程，右击检查，如下图所示：我们可以看到每一门课程都是放在一个li标签之中</p><ul><li>课程的名字就存放在对应li标签的<code>data-name</code>属性中</li><li>课程报名人数信息则存储在<code>class=one</code>的p标签下</li><li>课程的价格信息则存储在<code>class=two</code>的p标签下的<code>class=price</code>的span标签中<br><img "" class="lazyload placeholder" data-original="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e6777c301ac4e518e2a2cc4f7484c4e~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></li></ul><h3 id="抓取数据"><a href="#抓取数据" class="headerlink" title="抓取数据"></a>抓取数据</h3><p>经过上面的分析之后，我们就可以开始写我们的代码了<br>我们先引入我们所需要的模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> superagent <span class="keyword">from</span> <span class="string">&#x27;superagent&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> cheerio <span class="keyword">from</span> <span class="string">&#x27;cheerio&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);<span class="comment">//后面写入文件会用到</span></span><br></pre></td></tr></table></figure><ul><li>我们先定义一个类，定义一个获取目标网页的方法。这里我们使用superagent来发起请求，同时使用了es6的<code>async await</code>来处理异步操作；拿到数据之后我们打印结果会发现html结构存储在返回对象的<code>text</code>属性中，所以我们直接把text存储的值return出去。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grabcourse</span> </span>&#123;</span><br><span class="line">  <span class="comment">//存储目标网页地址</span></span><br><span class="line">  private url: string = <span class="string">&#x27;https://coding.imooc.com/?c=fe&amp;sort=0&amp;unlearn=0&amp;page=1&#x27;</span>;</span><br><span class="line">  <span class="comment">//获取要爬取页面的html结构</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">getHtml</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> courseHtml = <span class="keyword">await</span> superagent.get(<span class="built_in">this</span>.url);</span><br><span class="line">    <span class="keyword">return</span> courseHtml.text;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.getHtml();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Grabcourse();</span><br></pre></td></tr></table></figure><ul><li>然后我们还需要对拿到的html结构进行解析，使用<code>cheerio</code>模块可以让我们很方便的拿到html中你想要的标签，因为它支持jquery的语法，熟悉的朋友可以非常快速的上手。<br><br>我们同样在类上定义一个方法用来解析获取到的html,它接受一个参数值必须是string类型，最终将解析到的结果return出去。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">loadhtml</span>(<span class="params">html: string</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cheerio.load(html);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>到了这一步，我们现在需要获取到每一门课程的信息，我们同样在类上定义一个获取课程信息的方法,结合我们上面的分析，用<code>&#39;.course-list li&#39;</code>选择器可以获取的到所有的课程，然后我们对它进行遍历，拿到其他需要的值并存入到数组中；这里我将函数的参数类型定义为any了不然ts会抛出警告，同时我们还需要定义一个数组来存储课程信息，由于我们知道我们这个数组里的每一项都只有<code>课程名称</code>，<code>课程报名人数信息</code>和<code>价格</code>，所以这里我们可以定义一个接口<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface Course &#123;</span><br><span class="line">  <span class="attr">courseName</span>: string;</span><br><span class="line">  courseType: string;</span><br><span class="line">  coursePrice: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>然后在类上加上下面这行代码来规定这个数组里的每一项必须的Course类型<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private courseItems:Course[] = [];</span><br></pre></td></tr></table></figure>获取所有课程信息的相关代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取课程信息</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">getCourseInfo</span>(<span class="params">$element: any</span>)</span> &#123;</span><br><span class="line">    $element(<span class="string">&#x27;.course-list li&#x27;</span>).each(<span class="function">(<span class="params">idx: any, ele: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> courseName = $element(ele).attr(<span class="string">&#x27;data-name&#x27;</span>);</span><br><span class="line">      <span class="comment">//发现有空格用replace去除</span></span><br><span class="line">      <span class="keyword">const</span> courseType = $element(ele).find(<span class="string">&#x27;.one&#x27;</span>).text().replace(<span class="regexp">/\s/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> coursePrice = $element(ele).find(<span class="string">&#x27;.two .price&#x27;</span>).text();</span><br><span class="line">      <span class="built_in">this</span>.courseItems.push(&#123;</span><br><span class="line">        courseName,</span><br><span class="line">        courseType,</span><br><span class="line">        coursePrice,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.courseItems;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>接下来我们需要写一个保存所获取到的课程信息的方法，我们依然在类上定义一个方法，<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存所获取到的课程</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">saveCourseItems</span>(<span class="params">result: Course[]</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      <span class="attr">course</span>: result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保存逻辑</span></span><br><span class="line">    fs.writeFile(<span class="string">&#x27;./course.json&#x27;</span>, <span class="built_in">JSON</span>.stringify(data), <span class="function">(<span class="params">err: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;文件写入成功。&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>秉着高内聚低耦合的原则，我们前面都是定义的一个个单独的方法，现在我们需要把这些方法放在一个方法内，然后在constructor中来执行这一个单独的方法就可以了,当我们new Grabcourse时，这些爬取的逻辑就会一一的执行，并且阅读起来也更容易<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">initSpride</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="keyword">await</span> <span class="built_in">this</span>.getHtml();</span><br><span class="line">  <span class="keyword">const</span> $element = <span class="keyword">await</span> <span class="built_in">this</span>.loadhtml(html);</span><br><span class="line">  <span class="keyword">const</span> courseItems = <span class="keyword">await</span> <span class="built_in">this</span>.getCourseInfo($element);</span><br><span class="line">  <span class="built_in">this</span>.saveCourseItems(courseItems);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.initSpride();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>最后运行一下命令<code>npm run dev</code>,就可以看到生成了course.json文件，打开文件就能看到下图所示的数据，就表示我们的爬虫已经成功了</li></ul><p><img "" class="lazyload placeholder" data-original="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a50a8bb268a34d62ba7ad95fd2286e0b~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> superagent <span class="keyword">from</span> <span class="string">&#x27;superagent&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> cheerio <span class="keyword">from</span> <span class="string">&#x27;cheerio&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">interface Course &#123;</span><br><span class="line">  <span class="attr">courseName</span>: string;</span><br><span class="line">  courseType: string;</span><br><span class="line">  coursePrice: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grabcourse</span> </span>&#123;</span><br><span class="line">  private url: string = <span class="string">&#x27;https://coding.imooc.com/?c=fe&amp;sort=0&amp;unlearn=0&amp;page=1&#x27;</span>;</span><br><span class="line">  private courseItems:Course[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取要爬取页面的html结构</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">getHtml</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> courseHtml = <span class="keyword">await</span> superagent.get(<span class="built_in">this</span>.url);</span><br><span class="line">    <span class="keyword">return</span> courseHtml.text;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//解析html</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">loadhtml</span>(<span class="params">html: string</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cheerio.load(html);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取课程信息</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">getCourseInfo</span>(<span class="params">$element: any</span>)</span> &#123;</span><br><span class="line">    $element(<span class="string">&#x27;.course-list li&#x27;</span>).each(<span class="function">(<span class="params">idx: any, ele: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> courseName = $element(ele).attr(<span class="string">&#x27;data-name&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> courseType = $element(ele).find(<span class="string">&#x27;.one&#x27;</span>).text().replace(<span class="regexp">/\s/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> coursePrice = $element(ele).find(<span class="string">&#x27;.two .price&#x27;</span>).text();</span><br><span class="line">      <span class="built_in">this</span>.courseItems.push(&#123;</span><br><span class="line">        courseName,</span><br><span class="line">        courseType,</span><br><span class="line">        coursePrice,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.courseItems;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">saveCourseItems</span>(<span class="params">result: Course[]</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      <span class="attr">course</span>: result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保存逻辑</span></span><br><span class="line">    fs.writeFile(<span class="string">&#x27;./course.json&#x27;</span>, <span class="built_in">JSON</span>.stringify(data), <span class="function">(<span class="params">err: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;文件写入成功。&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">initSpride</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> html = <span class="keyword">await</span> <span class="built_in">this</span>.getHtml();</span><br><span class="line">    <span class="keyword">const</span> $element = <span class="keyword">await</span> <span class="built_in">this</span>.loadhtml(html);</span><br><span class="line">    <span class="keyword">const</span> courseItems = <span class="keyword">await</span> <span class="built_in">this</span>.getCourseInfo($element);</span><br><span class="line">    <span class="built_in">this</span>.saveCourseItems(courseItems);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.initSpride();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Grabcourse();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生JS实现图片懒加载</title>
      <link href="/2021/09/18/%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
      <url>/2021/09/18/%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>图片懒加载是一种网页性能优化的方式，它能极大的提高用户体验。同时在面试的时候也经常容易被面试官问到其实现和原理，很早之前就接触过，由于最近几个月都没有写文章了，想着借此机会顺便复习一下</p></blockquote><h3 id="为什么需要懒加载？"><a href="#为什么需要懒加载？" class="headerlink" title="为什么需要懒加载？"></a>为什么需要懒加载？</h3><p>在一些图片比较多的网站（比如说大型电商网站）图片是非常多的，如果我们在打开网页的一瞬间就把网站的所有图片加载出来，很有可能造成卡顿和白屏的现象，用户体验变得极其的差，要是遇到脾气暴躁的小伙伴相信直接反手就是一个Ctrl+W。<br><br>因为图片真的很多，一瞬间就把网站的所有图片加载出来浏览器短时间内根本处理不完，但是我们打开网站的那一瞬间仅仅只能看到视口内的图片，这时候去加载网页最底部的图片是非常浪费资源和没有必要的，所以遇到这种情况使用<code>懒加载</code>技术就显得尤为必要了。</p><h3 id="懒加载实现原理"><a href="#懒加载实现原理" class="headerlink" title="懒加载实现原理"></a>懒加载实现原理</h3><p>懒加载的原理其实很简单，就是预先将图片真实的<code>src</code>放在我们自定义的属性里面（比如<code>data-src</code>），当图片出现在了我们的视口范围之内的时候，再把<code>data-src</code>赋值给<code>src</code>属性，完成图片加载。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 页面初始化时</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img11.360buyimg.com/pop/s590x470.jpg.webp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// 当图片出现在了视口范围之内</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img11.360buyimg.com/pop/s590x470.jpg.webp&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://img11.360buyimg.com/pop/s590x470.jpg.webp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>这里有个点就是初始化时可以不给img标签加上<code>src</code>属性，因为只要存在<code>src</code>属性，浏览器就会去执行一次请求将其指向的资源下载并应用到文档内，这里不加上可以提升一些性能</em></strong></p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>基于前面讲解的思路，我们自己手写一个懒加载</p><p>新建一个<code>lazyload.html</code>文件，初始化dom结构并设置对应的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>lazy load<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.img</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.pic</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--将真实的src先放在data-src中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载中...&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img10.360buyimg.com/n7/jfs/t1/183679/11/2189/143829/6091f5d8E933e7ad1/e3e2001666f2ce7b.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载中...&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img12.360buyimg.com/n7/jfs/t1/192682/11/617/163213/608b887aEddbbbee3/9570466a90d02f79.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载中...&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img14.360buyimg.com/n7/jfs/t1/156161/35/18802/268242/60641d96Eca3dee7f/4a32070a19deb4f5.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载中...&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img10.360buyimg.com/n7/jfs/t1/130179/12/9273/167054/5f5468edE9d4ecd9c/39f7520d9f76b695.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载中...&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img14.360buyimg.com/n7/jfs/t1/100888/13/13132/105320/5e5533c6Ea8daa487/f95d7ba4da5581c5.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载中...&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img10.360buyimg.com/n7/jfs/t1/173986/31/8862/291849/6098d6d0E26c55012/c2144f6e074556d2.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载中...&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img10.360buyimg.com/n7/jfs/t1/110754/4/12605/101916/5ee43244E6fbf9433/c42fb5e3f9558a59.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载中...&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img10.360buyimg.com/n7/jfs/t1/148370/31/1084/45848/5eedc2eeEfdc2cd46/f3c3a6f0bd7998be.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载中...&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img10.360buyimg.com/n7/jfs/t1/165930/8/7273/171076/602fd5dfE65a52775/ee27074b7037c020.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载中...&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img13.360buyimg.com/n7/jfs/t1/190093/28/117/193777/60867822Ea949fbec/6fe51b122d0fdc5a.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载中...&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;https://img14.360buyimg.com/n7/jfs/t1/119501/15/6768/115886/5eca6c36Eb3541dc9/2f4534173878a23c.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来是JS部分，我们需要提前知道几个值，一个是当前浏览器窗口的视口高度，另一个是每张图片距离视口顶部的距离，因为只有当图片距离顶部的距离小于我们的视口高度，那么就代表这张图片已经出现在我们的视口范围内了。</p><h4 id="获取浏览器视口高度"><a href="#获取浏览器视口高度" class="headerlink" title="获取浏览器视口高度"></a>获取浏览器视口高度</h4><p>获取可视区域的高度我们通常使用<code>window.innerHeight</code>就可以拿到了，当然如果需要兼容低版本IE浏览器的话则可以使用<code>document.documentElement.clientHeight</code>来获取，这里我们做一个兼容处理</p><p><code>const viewPortHeight = window.innerHeight || document.documentElement.clientHeight</code></p><h4 id="获取图片离顶部的距离"><a href="#获取图片离顶部的距离" class="headerlink" title="获取图片离顶部的距离"></a>获取图片离顶部的距离</h4><p>这里我们简单粗暴一点，直接使用<code>getBoundingClientRect()</code>这个方法来获取，对这个方法不了解的小伙伴可以点击<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect">这里</a>进行查看</p><p>到这里，我们所需要的两个值就都可以拿到了，下面直接上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有图片</span></span><br><span class="line"><span class="keyword">const</span> imgList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"><span class="comment">// 用于记录当前显示到了哪一张图片</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取浏览器视口高度,这里写在函数内部是考虑浏览器窗口大小改变的情况</span></span><br><span class="line">  <span class="keyword">const</span> viewPortHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt; imgList.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 这里用可视区域高度减去图片顶部距离可视区域顶部的高度</span></span><br><span class="line">    <span class="keyword">const</span> distance = viewPortHeight - imgList[i].getBoundingClientRect().top;</span><br><span class="line">    <span class="comment">// 如果可视区域高度大于等于元素顶部距离可视区域顶部的高度，说明图片已经出现在了视口范围内</span></span><br><span class="line">    <span class="keyword">if</span> (distance &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 给图片赋值真实的src，展示图片</span></span><br><span class="line">      imgList[i].src = imgList[i].getAttribute(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">      <span class="comment">// 前i张图片已经加载完毕，下次从第i+1张开始检查是否需要显示</span></span><br><span class="line">      index = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个防抖函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay = <span class="number">500</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面加载完成执行一次lazyload，渲染第一次打开的网页视口内的图片</span></span><br><span class="line"><span class="built_in">window</span>.onload = lazyload;</span><br><span class="line"><span class="comment">// 监听Scroll事件，为了防止频繁调用，使用防抖函数进行优化</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, debounce(lazyload, <span class="number">600</span>));</span><br><span class="line"><span class="comment">// 浏览器窗口大小改变时重新计算</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, debounce(lazyload, <span class="number">600</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最后效果"><a href="#最后效果" class="headerlink" title="最后效果"></a>最后效果</h3><p>到这里我们的图片懒加载就写完了，下面是效果图，喜欢的朋友麻烦点个赞吧</p><p><img "" class="lazyload placeholder" data-original="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/202c88e5e17a4fda938c86d65e8295d3~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="collapse.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript语法进阶笔记</title>
      <link href="/2021/09/10/TypeScript%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/09/10/TypeScript%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="联合类型和类型保护"><a href="#联合类型和类型保护" class="headerlink" title="联合类型和类型保护"></a>联合类型和类型保护</h2><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>先来看一段代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Bird &#123;</span><br><span class="line">    <span class="attr">fly</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    sing: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Dog &#123;</span><br><span class="line">    <span class="attr">fly</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    bark: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trainAnimal</span>(<span class="params">animal: Bird | Dog</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (animal.fly) &#123;</span><br><span class="line">      animal.sing() <span class="comment">// 报错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们定义了一个<code>trainAnimal</code>的函数，它可以接收<code>Bird</code>或者<code>Dog</code>作为参数，<code>Bird | Dog</code>这就是联合类型，但上面的代码显然是有问题的，因为TS并不知道<code>animal.fly</code>为真的时候它就是一个<code>Bird</code>，这个时候我们就需要做类型保护了</p><blockquote><p>使用类型保护有很多种方式，一起来看看都有哪些吧</p></blockquote><h3 id="类型保护的方式"><a href="#类型保护的方式" class="headerlink" title="类型保护的方式"></a>类型保护的方式</h3><ul><li>使用<code>as</code>进行类型断言</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trainAnial</span>(<span class="params">animal: Bird | Dog</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (animal.fly) &#123;</span><br><span class="line">    (animal <span class="keyword">as</span> Bird).sing()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    (animal <span class="keyword">as</span> Dog).bark()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>使用<code>in</code>关键字</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trainAnial</span>(<span class="params">animal: Bird | Dog</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;sing&#x27;</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">    animal.sing()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    animal.bark()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>typeof</code>运算符</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">first: <span class="built_in">string</span> | <span class="built_in">number</span>, second: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> first === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> second === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> first + second</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>instanceof</code>运算符</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">first: NumberObj | <span class="built_in">number</span>, second: NumberObj | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (first <span class="keyword">instanceof</span> NumberObj &amp;&amp; second <span class="keyword">instanceof</span> NumberObj) &#123;</span><br><span class="line">    <span class="keyword">return</span> first.count + second.count</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Enum枚举类型"><a href="#Enum枚举类型" class="headerlink" title="Enum枚举类型"></a>Enum枚举类型</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Status &#123;</span><br><span class="line">  OFFLINE,</span><br><span class="line">  ONLINE,</span><br><span class="line">  DELETED,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Status[<span class="string">&#x27;ONLINE&#x27;</span>]) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(Status[<span class="number">1</span>]) <span class="comment">// ONLINE</span></span><br></pre></td></tr></table></figure><blockquote><p>定数值，后一个值从指定的值+1</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Status &#123;</span><br><span class="line">  OFFLINE,</span><br><span class="line">  ONLINE = <span class="number">4</span></span><br><span class="line">  DELETED,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Status)</span><br><span class="line"><span class="comment">/*打印结果*/</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;OFFLINE&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;ONLINE&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;DELETED&#x27;</span>,</span><br><span class="line">  <span class="attr">OFFLINE</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">ONLINE</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">DELETED</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**/</span></span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>泛型指的是泛指的类型，可以让代码更加的灵活</p></blockquote><h3 id="函数泛型"><a href="#函数泛型" class="headerlink" title="函数泛型"></a>函数泛型</h3></li><li><p>基本使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>&lt;<span class="title">T</span>&gt;(<span class="params">first: T, second: T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用的时候才指定类型</span></span><br><span class="line">add&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// params接收一个每一项值的类型都是ABC的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>&lt;<span class="title">ABC</span>&gt;(<span class="params">params: ABC[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map&lt;<span class="built_in">string</span>&gt;([<span class="string">&#x27;ts&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>&lt;<span class="title">ABC</span>&gt;(<span class="params">params: <span class="built_in">Array</span>&lt;ABC&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义多个泛型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个泛型用逗号隔开</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">join</span>&lt;<span class="title">T</span>, <span class="title">P</span>&gt;(<span class="params">first: T, second: P</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">join&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;(<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="类中的泛型以及类型泛型"><a href="#类中的泛型以及类型泛型" class="headerlink" title="类中的泛型以及类型泛型"></a>类中的泛型以及类型泛型</h3></li><li><p>基本使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> data: T[]</span>)</span> &#123;&#125;</span><br><span class="line">  getItem(index: <span class="built_in">number</span>):T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.data[index]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> DataManager&lt;<span class="built_in">string</span>&gt;([<span class="string">&#x27;hello&#x27;</span>])</span><br><span class="line">data.getItem(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>继承interface</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Item &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> data: T[]</span>)</span> &#123;&#125;</span><br><span class="line">  getItem(index: <span class="built_in">number</span>):<span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.data[index].name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> DataManager([&#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span> &#125;])</span><br><span class="line"><span class="built_in">console</span>.log(data.getItem(<span class="number">0</span>)) <span class="comment">// Tom</span></span><br></pre></td></tr></table></figure></li><li><p>利用<code>extends</code>对泛型的类型进行约束</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">string</span> | <span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> data: T[]</span>)</span> &#123;&#125;</span><br><span class="line">  getItem(index: <span class="built_in">number</span>):T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.data[index]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用泛型作为一个函数的类型注解</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>&lt;<span class="title">T</span>&gt;(<span class="params">params: T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> func: &lt;T&gt;<span class="function">(<span class="params">params: T</span>) =&gt;</span> T = Hello</span><br></pre></td></tr></table></figure><h2 id="命名空间namespace"><a href="#命名空间namespace" class="headerlink" title="命名空间namespace"></a>命名空间namespace</h2></li><li><p>基本使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Home &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Header</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> header = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">      header.innerHTML = <span class="string">&#x27;Header&#x27;</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(header)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> main = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">      main.innerHTML = <span class="string">&#x27;Main&#x27;</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(main)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Footer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> footer = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">      footer.innerHTML = <span class="string">&#x27;Footer&#x27;</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(footer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用export进行导出</span></span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> Header()</span><br><span class="line">      <span class="keyword">new</span> Main()</span><br><span class="line">      <span class="keyword">new</span> Footer()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">new</span> Home.Page()</span><br></pre></td></tr></table></figure></li><li><p>使用模块化的思想进行拆分，并最终打包到一个文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components.ts</span></span><br><span class="line"><span class="keyword">namespace</span> Components &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> header = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">      header.innerHTML = <span class="string">&#x27;Header&#x27;</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(header)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> main = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">      main.innerHTML = <span class="string">&#x27;Main&#x27;</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(main)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Footer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> footer = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">      footer.innerHTML = <span class="string">&#x27;Footer&#x27;</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(footer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page.ts</span></span><br><span class="line"><span class="keyword">namespace</span> Home &#123;</span><br><span class="line">  <span class="comment">// 使用export进行导出</span></span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> Components.Header()</span><br><span class="line">      <span class="keyword">new</span> Components.Main()</span><br><span class="line">      <span class="keyword">new</span> Components.Footer()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>想要将所有ts文件打包到一个js文件中，可以配置<code>tsconfig.json</code>中的<code>outFile</code>字段，注意<code>module</code>字段此时就不支持<code>commom js</code>规范了，可以改成<code>amd</code></p></blockquote></li><li><p>给namespace添加依赖声明</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;./components.ts&quot; /&gt; </span></span><br><span class="line"><span class="keyword">namespace</span> Home &#123;</span><br><span class="line">  <span class="comment">// 使用export进行导出</span></span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> Components.Header()</span><br><span class="line">      <span class="keyword">new</span> Components.Main()</span><br><span class="line">      <span class="keyword">new</span> Components.Footer()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补充</p><blockquote><p>命名空间里还能写其他很多东西，比如</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Components &#123;</span><br><span class="line">  <span class="comment">// 定义接口</span></span><br><span class="line">  <span class="keyword">interface</span> User &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加子命名空间</span></span><br><span class="line">  <span class="keyword">namespace</span> SubComponents &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Parcel打包TS"><a href="#使用Parcel打包TS" class="headerlink" title="使用Parcel打包TS"></a>使用Parcel打包TS</h2></li><li><p>新建一个文件夹，运行<code>npm init -y</code>和<code>tsc --init</code>初始化项目</p></li><li><p>修改<code>tsconfig.json</code>中的<code>rootDir</code>和<code>outDir</code>字段</p></li><li><p>新建一个<code>src</code>目录里面存放index.html和test.ts，并且在index.html引入test.ts</p></li><li><p>运行<code>npm i parcel -D</code>安装parcel</p></li><li><p>在<code>package.json</code>中添加命令<code>&quot;test&quot;: &quot;parcel ./src/index.html&quot;</code></p></li><li><p>在终端输入命令<code>npm run test</code></p></li></ul><p><img "" class="lazyload placeholder" data-original="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5c5f2c218ad4fa4867ab4cf5116f052~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="企业微信截图_16365161385090.png"></p><blockquote><p>此时parcel就启动了一个服务，当我们打开<a href="http://localhost:1234/">http://localhost:1234</a> 可以看到ts中的代码都被执行输出了，上面就是利用parcel自动帮我们打包ts文件，可以看到非常方便</p></blockquote><h2 id="描述文件中的全局类型"><a href="#描述文件中的全局类型" class="headerlink" title="描述文件中的全局类型"></a>描述文件中的全局类型</h2><blockquote><p>当我们安装第三方js包的时候，ts默认是不能识别出它的类型的的，除了安装对应的类型定义文件，我们也可以写已一个.d.ts文件让ts能够识别这些代码不报错，我们以Jquery为例</p></blockquote><ul><li>jquery使用cdn类型定义文件的写法<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* jquery.d.ts */</span></span><br><span class="line"><span class="keyword">interface</span> JqueryIntance &#123;</span><br><span class="line">  <span class="attr">html</span>: <span class="function">(<span class="params">html: <span class="built_in">string</span></span>) =&gt;</span> JqueryIntance</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义全局变量</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> $: <span class="function">(<span class="params">params: () =&gt; <span class="built_in">void</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局函数和函数重载</span></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">readyFunc: () =&gt; <span class="built_in">void</span></span>): <span class="title">void</span> </span></span><br><span class="line"><span class="function"><span class="title">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector: <span class="built_in">string</span></span>): <span class="title">JqueryIntance</span> </span></span></span><br><span class="line"><span class="function"><span class="function"></span></span></span><br><span class="line"><span class="function"><span class="function">// 如何对对象和类进行类型定义，以及<span class="title">namespace</span>嵌套</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">declare</span> <span class="title">namespace</span> <span class="title">$</span> </span>&#123;</span></span><br><span class="line"><span class="function">  <span class="title">namespace</span> <span class="title">fn</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">init</span> </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>jquery使用npm安装的方式类型定义文件的写法<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;jquery&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> JqueryInstance &#123;</span><br><span class="line">    <span class="attr">html</span>: <span class="function">(<span class="params">html: <span class="built_in">string</span></span>) =&gt;</span> JqueryInstance</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 混合类型</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">readyFunc: () =&gt; <span class="built_in">void</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector: <span class="built_in">string</span></span>): <span class="title">JqueryInstance</span></span></span></span><br><span class="line"><span class="function"><span class="function">  <span class="title">namespace</span> <span class="title">$</span> </span>&#123;</span></span><br><span class="line"><span class="function">    <span class="title">namespace</span> <span class="title">fn</span> </span>&#123;</span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">init</span> </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> = $</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型中keyof语法的使用"><a href="#泛型中keyof语法的使用" class="headerlink" title="泛型中keyof语法的使用"></a>泛型中keyof语法的使用</h2><blockquote><p>先来看一段代码</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  salary: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> info: Person</span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">getInfo</span>(<span class="params">key: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.info[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> People(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">29</span>,</span><br><span class="line">  <span class="attr">salary</span>: <span class="number">3000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.getInfo(<span class="string">&#x27;age&#x27;</span>)) <span class="comment">// 29</span></span><br></pre></td></tr></table></figure><blockquote><p>里我们定义了一个getInfo方法用来获取对应的属性，这段代码虽然也可以运行，但是当我们传递的属性不是name、age、salary的时候就会输出undefined了，假设我要限制一个传入的属性必须是Person中才有的，那么这个时候keyos语法就派上用场了</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改写People类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> info: Person</span>)</span> &#123;&#125;</span><br><span class="line">  getInfo&lt;T <span class="keyword">extends</span> keyof Person&gt;(key: T): Person[T] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.info[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时当我们调用<code>getInfo</code>的时候传入的如果不是<code>Person</code>上有的属性就会提示错误了，这个时候就能很好的对我们的传参做一些保护限制</p></blockquote></li></ul><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h3 id="类的装饰器"><a href="#类的装饰器" class="headerlink" title="类的装饰器"></a>类的装饰器</h3><ul><li>基本写法<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰器本身是一个函数</span></span><br><span class="line"><span class="comment"> * 装饰器通过@ 符号来使用</span></span><br><span class="line"><span class="comment"> * 类创建好之后会立即执行这个装饰器</span></span><br><span class="line"><span class="comment"> * 可以用多个装饰器对类进行装饰，执行顺序从右到左，从下往上</span></span><br><span class="line"><span class="comment"> * 可以用函数包裹一层，根据不同条件返回不同的装饰器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span>(<span class="params">constructor: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;decorator&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@testDecorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure></li><li>利用泛型的写法<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">new</span> (<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt; <span class="title">any</span>&gt;(<span class="params">constructor: T</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">constructor</span> </span>&#123;</span><br><span class="line">      name = <span class="string">&#x27;world&#x27;</span></span><br><span class="line">      <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = testDecorator()(<span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通方法，target对应的是类的prototype</span></span><br><span class="line"><span class="comment">// 静态方法，target对应的是类的constructor</span></span><br><span class="line"><span class="comment">// key对应方法的名字</span></span><br><span class="line"><span class="comment">// descriptor方法的属性描述符，类似Object.defineProperty的第三个参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNameDecorator</span>(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target, key);</span><br><span class="line">  descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;descriptor&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pesrson</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@getNameDecorator</span></span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Pesrson()</span><br></pre></td></tr></table></figure><h3 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nameDescriptor</span>(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 修改的并不是实例上的name，而是原型上的name</span></span><br><span class="line">  target[key] = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="meta">@nameDescriptor</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;hahaha&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test()</span><br><span class="line"><span class="built_in">console</span>.log(test.name) <span class="comment">// hahaha</span></span><br><span class="line"><span class="built_in">console</span>.log((test <span class="keyword">as</span> <span class="built_in">any</span>).__proto__.name) <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><h3 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paramsDescriptor</span>(<span class="params">target: <span class="built_in">any</span>, method: <span class="built_in">string</span>, paramsIndex: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target, method, paramsIndex)<span class="comment">// &#123; getInfo: [Function (anonymous)] &#125; getInfo 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;hahaha&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getInfo</span>(<span class="params"><span class="meta">@paramsDescriptor</span> name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中常用的继承方式总结</title>
      <link href="/2021/09/06/JS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2021/09/06/JS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JS继承一直是前端面试中经常遇到问题，那么一起来看下都有哪些继承方式吧</p></blockquote><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><blockquote><p>将父类的实例作为子类的原型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.isShow = <span class="literal">true</span></span><br><span class="line">  <span class="built_in">this</span>.info = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.isShow, <span class="built_in">this</span>.info)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1 = <span class="keyword">new</span> Child()</span><br><span class="line"><span class="keyword">const</span> c2 = <span class="keyword">new</span> Child()</span><br><span class="line"></span><br><span class="line">c1.info.name = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">c1.isShow = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c1.getInfo()) <span class="comment">// false &#123;name: &#x27;李四&#x27;, age: 19&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(c2.getInfo()) <span class="comment">// true &#123;name: &#x27;李四&#x27;, age: 19&#125;</span></span><br></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>简单易于实现</li><li>父类方法可以复用</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>父类的所有<code>引用属性</code>会被所有子类共享，更改一个子类的<code>引用属性</code>，其他子类也会受影响</li><li>子类型实例不能给父类型构造函数传参</li></ul><h2 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h2><blockquote><p>在子类构造函数中调用父类构造函数，可以在子类构造函数中使用call()和apply()方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.isShow = <span class="literal">true</span></span><br><span class="line">  <span class="built_in">this</span>.info = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.isShow, <span class="built_in">this</span>.info)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1 = <span class="keyword">new</span> Child()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(c1)) <span class="comment">// &#123;&quot;isShow&quot;:true,&quot;info&quot;:&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:19&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>创建子类实例时，可以向父类传递参数</li><li>可以实现多继承(call多个父类对象)</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>不能继承原型属性/方法，只能继承父类的实例属性和方法</li><li>方法都在构造函数中定义,无法实现复用</li><li>每个子类都有父类实例函数的副本，影响性能</li></ul><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><blockquote><p>组合<code>原型链继承</code>和<code>借用构造函数继承</code>这两种方法就是组合继承。<br>基本的思路就是使用原型链继承原型上的属性和方法，而通过构造函数继承实例属性，这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.isShow = <span class="literal">true</span></span><br><span class="line">  <span class="built_in">this</span>.info = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.isShow, <span class="built_in">this</span>.info)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 继承父类属性</span></span><br><span class="line">  Parent.call(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承父类方法</span></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1 = <span class="keyword">new</span> Child()</span><br><span class="line">c1.getInfo() <span class="comment">// true &#123;name: &#x27;张三&#x27;, age: 19&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(c1)) <span class="comment">// &#123;&quot;isShow&quot;:true,&quot;info&quot;:&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:19&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li>函数可以复用</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>调用了两次父类，所以产生了两份实例</li></ul><h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><blockquote><p>利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// copyObj()对传入其中的对象执行了一次浅复制，将构造函数Fn的原型直接指向传入的对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Fn.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Fn()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;wang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">  <span class="attr">color</span>: [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;bule&#x27;</span>],</span><br><span class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1 = copyObj(person)</span><br><span class="line">c1.name = <span class="string">&#x27;hahaha&#x27;</span></span><br><span class="line">c1.color.push(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">c1.sayName() <span class="comment">// hahaha</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c2 = copyObj(person)</span><br><span class="line">c2.name = <span class="string">&#x27;enenen&#x27;</span></span><br><span class="line">c2.color.push(<span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line">c2.sayName() <span class="comment">// enenen</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(person)) <span class="comment">// &#123;&quot;name&quot;:&quot;wang&quot;,&quot;age&quot;:19,&quot;color&quot;:[&quot;red&quot;,&quot;pink&quot;,&quot;bule&quot;,&quot;yellow&quot;,&quot;orange&quot;]&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><ul><li>父类方法可复用</li></ul><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><ul><li>父类的引用会被所有子类所共享</li><li>无法传递参数<blockquote><p>另外，ES5中存在Object.create()的方法，能够代替上面的copyObj方法。</p></blockquote></li></ul><h2 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h2><blockquote><p>比较完美的继承实现方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">Child, Parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = <span class="built_in">Object</span>.create(Parent.prototype);  <span class="comment">// 创建对象，创建父类原型的一个副本</span></span><br><span class="line">  prototype.constructor = Child;                    <span class="comment">// 增强对象，弥补因重写原型而失去的默认的constructor 属性</span></span><br><span class="line">  Child.prototype = prototype;                      <span class="comment">// 指定对象，将新创建的对象赋值给子类的原型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类初始化实例属性和原型属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 借用构造函数传递增强子类实例属性（支持传参和避免篡改）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="built_in">this</span>, name)</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将父类原型指向子类</span></span><br><span class="line">inheritPrototype(Child, Parent)</span><br><span class="line"><span class="comment">// 新增子类原型方法</span></span><br><span class="line">Child.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Child(<span class="string">&#x27;tom&#x27;</span>, <span class="number">67</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Child(<span class="string">&#x27;lisa&#x27;</span>, <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line">p1.colors.push(<span class="string">&#x27;pink&#x27;</span>) <span class="comment">// [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;pink&quot;]</span></span><br><span class="line">p2.colors.push(<span class="string">&#x27;yellow&#x27;</span>) <span class="comment">// [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ES6类继承extends"><a href="#ES6类继承extends" class="headerlink" title="ES6类继承extends"></a>ES6类继承extends</h2><blockquote><p>ES6中引入了class关键字，class可以通过extends关键字实现继承;<br>需要注意的是，class关键字只是原型的语法糖，JavaScript继承仍然是基于原型实现的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">showName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;调用父类的方法&quot;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span>  Parent(<span class="string">&#x27;tom&#x27;</span>, <span class="number">79</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1) <span class="comment">// Parent&#123;name: &#x27;tom&#x27;, age: 79&#125;</span></span><br><span class="line"><span class="comment">//定义一个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age, salary</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 通过super调用父类的构造方法</span></span><br><span class="line">    <span class="built_in">super</span>(name, age)</span><br><span class="line">    <span class="built_in">this</span>.salary = salary</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在子类自身定义方法</span></span><br><span class="line">  <span class="function"><span class="title">showName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;调用子类的方法&quot;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.age, <span class="built_in">this</span>.salary);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c1 = <span class="keyword">new</span> Child(<span class="string">&#x27;lisa&#x27;</span>, <span class="number">38</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(c1) <span class="comment">// Child&#123;name: &#x27;lisa&#x27;, age: 38, salary: 100&#125;</span></span><br><span class="line">c1.showName()</span><br></pre></td></tr></table></figure><p>最后说一下这种方式的优缺点</p><h3 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h3><ul><li>语法简单易懂,操作更方便</li></ul><h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><ul><li>并不是所有的浏览器都支持class关键字</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端适配px自动转换成rem</title>
      <link href="/2021/08/13/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8Dpx%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E6%88%90rem/"/>
      <url>/2021/08/13/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8Dpx%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E6%88%90rem/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近写移动端的项目时遇到了适配的问题，除了手写rem外，使用第三方工具可以很好的解决，并且能大大提升开发效率，在此做个记录</p></blockquote><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>使用 <code>rem</code> 单位进行适配，推荐使用以下两个工具：</p><ul><li>  <a href="https://github.com/cuth/postcss-pxtorem">postcss-pxtorem</a> 是一款 PostCSS 插件，用于将 px 单位转化为 rem 单位</li><li>  <a href="https://github.com/amfe/lib-flexible">lib-flexible</a> 用于设置 rem 基准值</li></ul><p><code>npm install postcss postcss-pxtorem --save-dev</code></p><p><code>npm i -S amfe-flexible</code></p><h2 id="进行配置"><a href="#进行配置" class="headerlink" title="进行配置"></a>进行配置</h2><ul><li>在根目录下新建<code>postcss.config.js</code>写入如下代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">     <span class="comment">// postcss-pxtorem 插件的版本需要 &gt;= 5.0.0</span></span><br><span class="line">    <span class="string">&#x27;postcss-pxtorem&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">rootValue</span>: <span class="number">75</span>, <span class="comment">// 根元素字体大小(1rem的值)，假设设计稿的尺寸为750</span></span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>在入口文件引入<code>amfe-flexible</code><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2>我们用vue-cli创建一个项目，取出不需要的文件，在App.vue写入以下代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>rem移动端适配<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.box</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">75px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">line-height</span>: <span class="number">75px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">background</span>: pink;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>打开浏览器可以看到，我们系的px样式都被自动转换成了rem，并且切换不同设备时都会自动帮我们设置根字体大小，需要注意的是行内样式是不会被转换的</p><p><img "" class="lazyload placeholder" data-original="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4b87d4d936c4a1e9246b93acd929d1b~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image.png"></p><p><img "" class="lazyload placeholder" data-original="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b4f158f138642f3b44e0a8d34a519d3~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image.png"></p><p><code>tips: 如果运行报错提示postCSS8啥的错误，则把postcss-pxtorem的版本降低到5.1.1就好了</code></p><h2 id="适配vant第三方ui框架"><a href="#适配vant第三方ui框架" class="headerlink" title="适配vant第三方ui框架"></a>适配vant第三方ui框架</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="comment">// postcss-pxtorem 插件的版本需要 &gt;= 5.0.0</span></span><br><span class="line">    <span class="string">&#x27;postcss-pxtorem&#x27;</span>: &#123;</span><br><span class="line">      <span class="function"><span class="title">rootValue</span>(<span class="params">&#123; file &#125;</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// vant是基于375px来写的</span></span><br><span class="line">        <span class="keyword">return</span> file.indexOf(<span class="string">&#x27;vant&#x27;</span>) !== -<span class="number">1</span> ? <span class="number">37.5</span> : <span class="number">75</span> <span class="comment">//（这里的75根据实际设计稿的尺寸填写）</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后，本文已同步到掘金，移步掘金点点击<a href="https://juejin.cn/user/8451824563901">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何比较两个数组的差异</title>
      <link href="/2021/08/08/%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%B7%AE%E5%BC%82/"/>
      <url>/2021/08/08/%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%B7%AE%E5%BC%82/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近遇到一个需求，需要比较两个数组的差异，数组的每一项都是一个对象，包括数组长度的变更，要求增加和删除都能检测到，将结果用表格的形式展现出来；网上寻找到相关的文章都是过于简单的数组里面是纯数字的情况，在这里并不适用，没办法只好手撸一个函数来实现一下，在此做个记录。<br>废话不多说直接开干，假设现在有两个数组如下:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变更前</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;阿花&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;翠花&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">17</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&#x27;上海&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;狗剩&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&#x27;杭州&#x27;</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">//变更后</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;大帅比&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&#x27;西安&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;老帅比&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">35</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&#x27;成都&#x27;</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>可以看到这两个数组内容是完全不一样的，我们的需求是比较这两个数组的变更，那么如何来实现呢？</p><h2 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h2><ol><li><p>我们先声明一个函数，设置好对应的形参用来接收变更前后的数组，并初始化函数的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">comparison</span>(<span class="params">previous, current</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//previous为变更前的数组，current为变更后的数组</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//定义好函数的返回值</span></span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么这里选择用数组来作为返回值呢，其实想象一下就能明白，上面我们要求要用表格的形式展现出来，用数组可以方便渲染数据，同时数组的每一项都是一组变更，数组的长度就是变更的组数，这个我们后面会慢慢体现。</p></li><li><p>现在我们要开始撸具体的实现部分了，在此之前我们先拿到一些值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取变更的组数，len代表变更了多少组数据</span></span><br><span class="line"><span class="keyword">const</span> len = <span class="built_in">Math</span>.max(arr1.length, arr2.length);</span><br><span class="line"><span class="comment">//获取用来遍历的数组</span></span><br><span class="line"><span class="keyword">const</span> loopArr = arr1.length &gt; arr2.length ? arr1 : arr2;</span><br><span class="line"><span class="comment">//获取用来另一个用来对比的数组</span></span><br><span class="line"><span class="keyword">const</span> preArr = arr1.length &gt; arr2.length ? arr2 : arr1;</span><br></pre></td></tr></table></figure><p>为什么要这么写呢，<code>len</code>这个变量存储的是变更了多少组数据,同时拿<code>loopArr</code>用来遍历就不会出现遗漏的情况，因为<code>loopArr</code>的长度和<code>len</code>是相等的，这是只需要用<code>preArr</code>存一下另一组数据就好了。</p></li><li><p>现在开始我们的逻辑部分<br>比对之前先做一层判断，若没有发生变更就直接return掉，这一块也可以提到函数前面一进来就判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有变更直接return</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">JSON</span>.stringify(arr1) === <span class="built_in">JSON</span>.stringify(arr2)) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>这里使用的是JSON.stringify来对比，要注意对象属性值为undefined和函数的情况，因为JSON.stringify会忽略掉它们</code></p></li></ol><p>函数执行到这里就说明发生了变更，我们先初始化每一组数据的变更：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  result[i] = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的是for循环来初始化，在vue的方法里写的话看着有点别扭，不知道有没有其他更简洁的写法，知道的小伙伴可以留个言哈</p><p>然后就开始我们的比对了，直接上码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">loopArr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">const</span> key <span class="keyword">in</span> item) &#123;</span><br><span class="line">    <span class="comment">//增加和删除的情况默认为空对象</span></span><br><span class="line">    preArr[index] || (preArr[index] = &#123;&#125;);</span><br><span class="line">    <span class="comment">//如果不相等就定义一个对象并push到数组中</span></span><br><span class="line">    <span class="keyword">if</span> (item[key] !== preArr[index][key]) &#123;</span><br><span class="line">      <span class="keyword">const</span> changedItem = &#123;</span><br><span class="line">        <span class="attr">fieldName</span>: key, <span class="comment">//字段名</span></span><br><span class="line">        <span class="attr">preValue</span>: arr1[index][key] || <span class="string">&#x27;&#x27;</span>, <span class="comment">//变更前的值，取不到默认为空</span></span><br><span class="line">        <span class="attr">currentValue</span>: arr2[index][key] || <span class="string">&#x27;&#x27;</span>,  <span class="comment">//变更后的值</span></span><br><span class="line">      &#125;</span><br><span class="line">      result[index].push(changedItem)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="比对结果"><a href="#比对结果" class="headerlink" title="比对结果"></a>比对结果</h2><p>到这里逻辑部分就写完了，我们来执行<code>comparison(arr1, arr2)</code>看看结果:<br><img "" class="lazyload placeholder" data-original="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c44152e8a1e40b888bba03d0773285a~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"><br>可以看到变更的值都检测到了，同时增加和删除也能检测到，这里我们把它设置为空了，不然会显示undefined</p><p>最后我们再用表格的形式来展现结果，可以更加直观的对比差异<br>由于我的那个需求数组里每一个对象都是一组规则，现在不管是增加删除还是修改，都可以检测到规则的变更了<br><img "" class="lazyload placeholder" data-original="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f634841d56b74ced839c5be9ce1f05ca~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>最后附上完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//变更前</span></span><br><span class="line">  <span class="keyword">const</span> arr1 = [&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;阿花&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;翠花&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;上海&#x27;</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;狗剩&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;杭州&#x27;</span></span><br><span class="line">  &#125;];</span><br><span class="line">  <span class="comment">//变更后</span></span><br><span class="line">  <span class="keyword">const</span> arr2 = [&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;大帅比&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;西安&#x27;</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;老帅比&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">35</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;成都&#x27;</span></span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">comparison</span>(<span class="params">previous, current</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//previous为变更前的数组，current为变更后的数组</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//定义好函数的返回值</span></span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="comment">//获取变更的组数，len代表变更了多少组数据</span></span><br><span class="line">  <span class="keyword">const</span> len = <span class="built_in">Math</span>.max(arr1.length, arr2.length);</span><br><span class="line">  <span class="comment">//获取用来遍历的数组</span></span><br><span class="line">  <span class="keyword">const</span> loopArr = arr1.length &gt; arr2.length ? arr1 : arr2;</span><br><span class="line">  <span class="comment">//获取用来另一个用来对比的数组</span></span><br><span class="line">  <span class="keyword">const</span> preArr = arr1.length &gt; arr2.length ? arr2 : arr1;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//没有变更直接return</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">JSON</span>.stringify(arr1) === <span class="built_in">JSON</span>.stringify(arr2)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//初始化每一组数据的变更</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    result[i] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//遍历比对差异</span></span><br><span class="line">  loopArr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">const</span> key <span class="keyword">in</span> item) &#123;</span><br><span class="line">      <span class="comment">//增加和删除的情况默认为空对象</span></span><br><span class="line">      preArr[index] || (preArr[index] = &#123;&#125;);</span><br><span class="line">      <span class="comment">//如果不相等就定义一个对象并push到数组中</span></span><br><span class="line">      <span class="keyword">if</span> (item[key] !== preArr[index][key]) &#123;</span><br><span class="line">        <span class="keyword">const</span> changedItem = &#123;</span><br><span class="line">          <span class="attr">fieldName</span>: key, <span class="comment">//字段名</span></span><br><span class="line">          <span class="attr">preValue</span>: arr1[index][key] || <span class="string">&#x27;&#x27;</span>, <span class="comment">//变更前的值，取不到默认为空</span></span><br><span class="line">          <span class="attr">currentValue</span>: arr2[index][key] || <span class="string">&#x27;&#x27;</span>,  <span class="comment">//变更后的值</span></span><br><span class="line">        &#125;</span><br><span class="line">        result[index].push(changedItem)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><em>到这里整个过程就结束了，喜欢的朋友帮忙点个赞吧。</em></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS实现图片飞入特效</title>
      <link href="/2021/07/29/JS%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E9%A3%9E%E5%85%A5%E7%89%B9%E6%95%88/"/>
      <url>/2021/07/29/JS%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E9%A3%9E%E5%85%A5%E7%89%B9%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p><img "" class="lazyload placeholder" data-original="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e2c35d3325949a4857769130a52b74c~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>前段时间在折腾自己的服务器的时候，无意中翻到了自己以前开始学习JS的时候写过的小案例，回想起当时自学前端的日子真是感受颇多；其中我找到一个用JS实现图片飞入的小案例，觉得挺有意思的，今天拿出来跟大家分享下。</p></blockquote><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>没错，文章开头的图片就是我们本次的素材了，下面是最终的效果图：<br><img "" class="lazyload placeholder" data-original="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40148a9140e3497482da2ce22fde6cf7~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>从效果图中可以看出来，最外层是放了一个大盒子，最终的大图会铺满这个大盒子，而整个一张大图是被分割成了许多的小图，将它们打乱顺序，然后在一个一个的推入到大盒子中。<br>这里其实是用了100个”小盒子”，每个小盒子中装了大图的一部分，通过给它们加上背景图片然后设置对应的定位值，最后把这100个小盒子打乱顺序挨个放到大盒子里就能实现上述的效果了。</p><ul><li><p>如何创建”小盒子”</p><p>我们第一步要做的就是先创建出这些”小盒子”,在这里我们可以把整张图片按照10x10来分割，总共100个小盒子，这里我们可以用数组实现：</p></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速生成一个length为100的数组</span></span><br><span class="line"><span class="keyword">const</span> list = [...new <span class="built_in">Array</span>(<span class="number">100</span>).keys()];</span><br></pre></td></tr></table></figure><ul><li><p>如何打乱顺序</p><p>上面<code>list</code>的值是从0~99按顺序来的，现在我们需要将这个数组打乱顺序；数组排序毋庸置疑可以用数组的<code>sort</code>方法，<code>sort</code>方法接收一个回调函数作为参数，回调函数的返回值如果小于0就会对数组升序排序，大于0就会进行降序排序；然后我们这里还要的一个随机的效果，<code>Math.random()</code>刚好能返回一个0到1之间的随机数，再接合上数组的<code>sort</code>方法，用<code>Math.random()</code>减去0.5就能实现对数组的值随机排序了，当然这个随机完全意义上来说是不准确，也可以说是不公平的，因为<code>Math.random()</code>永远也取不到1，不过在这里相对来说已经很随机了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打乱数组的顺序</span></span><br><span class="line">list.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure></li><li><p>如何计算每个小盒子的<code>left</code>和<code>top</code>值</p><p>我们先画个草图，如下图所示(偷个懒没写的部分大家自行脑补哈)，100个小盒子的最终排列效果就像这样，可以明显的看出每个小盒子的定位值是不一样的，但是貌似它们又遵循着某种规律，我们怎么获取到每一个小盒子的left和top值呢？</p><p><img "" class="lazyload placeholder" data-original="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4a71fa7980149bc90bb5ff588bac70e~tplv-k3u1fbpfcp-watermark.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><p>由于我们的素材图片是600px x 400px的，我们把它分割成10x10等份，通过计算可以得出，每一个小盒子的<code>width=60px</code>，<code>height=40px</code>。所以从图中可以看出：<br><br>第一个的left值=0<br><br>第二个的left值=60<br><br>第三个的left值=120<br><br>第四个的left值=180<br><br>…以此类推</p><p>而刚好我们这100个盒子是放在数组中，数组的下标从0开始，第一个盒子的索引为0，第二个盒子的索引为1，第三个盒子的索引为2，第四个盒子的索引为3，我们在x轴方向一排只放10个盒子，所以我们得出规律：<code>第几个小盒子的left值=（它的索引 % 10 ）x60</code>，也就是用每一个盒子的索引模上10来取余，再乘以一等份的width就能得到它的left值。<br><br>我们来验证一下：<br><br>第一个的left值 = <code>(0 % 10) * 60 = 0</code><br><br>第二个的left值 = <code>(1 % 10) * 60 = 60</code><br><br>第三个的left值 = <code>(2 % 10) * 60 = 120</code><br><br>第四个的left值 = <code>(3 % 10) * 60 = 180</code><br></p><p>没毛病，跟我们上面完全对的上，就是这么nice，每个盒子的left值已经得到了，现在我们获取top值，既然每个小盒子的left值是由规律的，那么top值是不是也有规律呢？答案是肯定的，我们来找一下。<br><br>通过上面的网格图可以得到:<br><br>第1个的top值=0<br><br>第11个的top值=40<br><br>第21个的top值=80<br><br>第31个的top值=120<br><br>第41个的top值=160<br><br>…</p><p>不难发现，<code>每一个小盒子的top值=Math.floor(它的索引 / 10) x 40</code>,这里我们只需要得到每个小盒子的十位部分，所以不需要小数。接着我们再来验证一下：<br><br>第1个的top值  = <code>Math.floor(0 / 10) * 40 = 0</code><br><br>第11个的top值 = <code>Math.floor(10 / 10) * 40 = 40</code><br><br>第21个的top值 = <code>Math.floor(20 / 10) * 40 = 80</code><br><br>第31个的top值 = <code>Math.floor(30 / 10) * 40 = 120</code><br><br>第41个的top值 = <code>Math.floor(40 / 10) * 40 = 160</code><br></p><p>同样没毛病，也完全对的上，一样的nice，到这里我们就已经得到了每一个小盒子的left和top值。</p></li><li><p>如何计算每个小盒子背景图片的left和top值</p><p>现在我们还需要给每一个小盒子加上露娜的背景图片并设置好对应的<code>background-position</code>，经过上面的分析到这里不难看出，每个小盒子的<code>background-position</code>跟它们的<code>left值</code>和<code>top值</code>是相反的，下面我们还需要准备一点东西。</p></li><li><p>如何实现飞入特效</p><p>这里我们需要引用一个JS动画库，叫做<code>anime.js</code>,大家可以去github搜一下就能找到了；<a href="https://www.animejs.cn/documentation/">点击这里</a>可以查看它的文档，了解相关用法。我们这里就是传入了一些配置，将我们上面计算到的定位值传入进去，最终来实现飞入的动画效果，下面就可以开始撸代码了。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>我们先创建最外层的容器(class为wrapper的div)并初始化样式，并且提前给里面的每个小盒子(class为box的div)设置好相应的样式</p></li><li><p>html部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>css部分</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>js部分<br>我们先获取最外层容器然后生成一个值为0-99的数组并打乱顺序，同时要知道我们每一张小盒子飞入容器中都是一次函数执行，所以我们需要一个索引值来记录当前飞入的是第几个小盒子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取容器盒子</span></span><br><span class="line"><span class="keyword">const</span> wrapper = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.wrapper&#x27;</span>);</span><br><span class="line"><span class="comment">//快速生成一个值为0-99、length为100的数组</span></span><br><span class="line"><span class="keyword">const</span> list = [...new <span class="built_in">Array</span>(<span class="number">100</span>).keys()];</span><br><span class="line"><span class="comment">//打乱数组的顺序</span></span><br><span class="line">list.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>);</span><br><span class="line"><span class="comment">//初始化索引值</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>然后我们需要定义一个函数，每一次执行这个函数就往容器中飞入一个小盒子，我们的<code>index就+1</code>，当index到达99的时候，说明就是最后一个小盒子，本次函数执行结束后下一次就不需要执行了，所以我们每一次执行函数我们先进行判断，如果index === 100，那么我们就终止函数执行<br></p></li></ul><p>然后我们挨个从数组中取出一个小盒子，结合上面的分析，获取到它的left值和top值，然后我们创建一个div给它设置好相应的样式然后append到容器中就好了，最后再由<code>anime</code>来生成飞入的动画,来看看具体代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fly</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//index=100时直接return</span></span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">100</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">//取出当前小盒子的位置，取完后index需要自增1</span></span><br><span class="line">  <span class="keyword">let</span> currentVal = list[index++];</span><br><span class="line">  <span class="comment">//获取当前盒子的left和top值</span></span><br><span class="line">  <span class="keyword">const</span> left = currentVal % <span class="number">10</span> * <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">const</span> top = <span class="built_in">Math</span>.floor(currentVal / <span class="number">10</span>) * <span class="number">40</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//生成一个盒子</span></span><br><span class="line">  <span class="keyword">const</span> box = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  <span class="comment">//加上我们前面定义的类名</span></span><br><span class="line">  box.classList.add(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">  <span class="comment">//设置背景图片的定位值和其他属性，这里./timg.jpg就是我们的素材图片</span></span><br><span class="line">  box.style.cssText = <span class="string">`background:url(&#x27;./timg.jpg&#x27;) <span class="subst">$&#123;-left&#125;</span>px <span class="subst">$&#123;-top&#125;</span>px no-repeat;</span></span><br><span class="line"><span class="string">                       background-size: 600px 400px;`</span>;</span><br><span class="line">  <span class="comment">//插入到容器中</span></span><br><span class="line">  wrapper.appendChild(box);</span><br><span class="line">  <span class="comment">//生成飞入动画，需要注意在此之前我们需要先引入anime.js</span></span><br><span class="line">  <span class="keyword">let</span> animation = anime(&#123;</span><br><span class="line">    <span class="attr">targets</span>: box, <span class="comment">//目标元素，这里指当前飞入的小盒子</span></span><br><span class="line">    <span class="attr">left</span>: left + <span class="string">&#x27;px&#x27;</span>, <span class="comment">//每一个小盒子的left值</span></span><br><span class="line">    <span class="attr">top</span>: top + <span class="string">&#x27;px&#x27;</span>, <span class="comment">//每一个小盒子的top值</span></span><br><span class="line">    <span class="attr">duration</span>: <span class="number">80</span>, <span class="comment">//每一个小盒子飞入的执行时间，单位是毫秒</span></span><br><span class="line">    <span class="attr">easing</span>: <span class="string">&#x27;linear&#x27;</span>, <span class="comment">//这里可以设置很多不一样的参数来控制动画如何执行</span></span><br><span class="line">    <span class="comment">//执行完当前动画后的延迟回调，因为我们需要执行100次，所以进行递归调用</span></span><br><span class="line">    <span class="attr">complete</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      fly();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>最后我们直接在外层调用<code>fly()</code>就可以了，到这里代码实现差不多就结束了，打开浏览器可以看到跟效果图一样的飞入动画了，其实这个案例分析明白想透彻了还是比较简单的，可能我上面有些地方描述的不是特别好，还望大家多多指教，喜欢的朋友可以点个赞支持一下哈，感谢各位大佬。</em><br></p><ul><li>下面附上完整代码，需要的小伙伴可以参考下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;图片飞入&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .wrapper &#123;</span><br><span class="line">      position: relative;</span><br><span class="line">      width: 600px;</span><br><span class="line">      height: 400px;</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      margin: 50px auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .wrapper .box &#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      width: 60px;</span><br><span class="line">      height: 40px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script src=&quot;./anime.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;wrapper&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    //获取容器盒子</span><br><span class="line">    const wrapper = document.querySelector(&#x27;.wrapper&#x27;);</span><br><span class="line">    //快速生成一个length为100的数组</span><br><span class="line">    const list = [...new Array(100).keys()];</span><br><span class="line">    //打乱数组的顺序</span><br><span class="line">    list.sort((a, b) =&gt; Math.random() - 0.5);</span><br><span class="line">    //初始化索引值</span><br><span class="line">    let index = 0;</span><br><span class="line"></span><br><span class="line">    function fly() &#123;</span><br><span class="line">      //index=100时直接return</span><br><span class="line">      if (index === 100) return;</span><br><span class="line">      //取出当前小盒子的位置，取完后index需要自增1</span><br><span class="line">      let currentVal = list[index++];</span><br><span class="line">      //获取当前盒子的left和top值</span><br><span class="line">      const left = currentVal % 10 * 60;</span><br><span class="line">      const top = Math.floor(currentVal / 10) * 40</span><br><span class="line"></span><br><span class="line">      //生成一个盒子</span><br><span class="line">      const box = document.createElement(&#x27;div&#x27;);</span><br><span class="line">      //加上我们前面定义的类名</span><br><span class="line">      box.classList.add(&#x27;box&#x27;);</span><br><span class="line">      //设置背景图片的定位值和其他属性，这里./timg.jpg就是我们的素材图片</span><br><span class="line">      box.style.cssText = `background:url(&#x27;./timg.jpg&#x27;) $&#123;-left&#125;px $&#123;-top&#125;px no-repeat;</span><br><span class="line">                       background-size: 600px 400px;`;</span><br><span class="line">      //插入到容器中</span><br><span class="line">      wrapper.appendChild(box);</span><br><span class="line">      //生成飞入动画，需要注意在此之前我们需要先引入anime.js</span><br><span class="line">      let animation = anime(&#123;</span><br><span class="line">        targets: box, //目标元素，这里指当前飞入的小盒子</span><br><span class="line">        left: left + &#x27;px&#x27;, //每一个小盒子的left值</span><br><span class="line">        top: top + &#x27;px&#x27;, //每一个小盒子的top值</span><br><span class="line">        duration: 80, //每一个小盒子飞入的执行时间，单位是毫秒</span><br><span class="line">        easing: &#x27;linear&#x27;, //这里可以设置很多不一样的参数来控制动画如何执行</span><br><span class="line">        //执行完当前动画后的延迟回调，因为我们需要执行100次，所以进行递归调用</span><br><span class="line">        complete: function () &#123;</span><br><span class="line">          fly();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //开始执行</span><br><span class="line">    fly();</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>教你用Node.js搭建本地服务器，并访问本地图片视频等静态资源</title>
      <link href="/2021/07/25/%E6%95%99%E4%BD%A0%E7%94%A8Node-js%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%B9%B6%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%A7%86%E9%A2%91%E7%AD%89%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
      <url>/2021/07/25/%E6%95%99%E4%BD%A0%E7%94%A8Node-js%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%B9%B6%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%A7%86%E9%A2%91%E7%AD%89%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>废话不多说，先用express搭建一个本地服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;Hello world&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8083</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running at http://localhost:8083&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后在命令行输入node app启动服务</p><p>这个时候我们打开浏览器访问<a href="http://localhost:8083就能看到hello">http://localhost:8083就能看到hello</a> world了，表示请求成功了如图<br><img "" class="lazyload placeholder" data-original="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/4/170a45c5521f699e~tplv-t2oaga2asx-image.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="在这里插入图片描述"><br>如果我们要访问图片，得先建一个public文件夹把资源放在里面，加上这几行代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/img&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.sendFile(path.join(__dirname, <span class="string">&#x27;public/2.png&#x27;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个时候我们在浏览器输入<a href="http://localhost:8083/img%E5%B0%B1%E8%83%BD%E8%AE%BF%E9%97%AE%E5%88%B0%E5%9B%BE%E7%89%87%E4%BA%86">http://localhost:8083/img就能访问到图片了</a><br><img "" class="lazyload placeholder" data-original="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/4/170a45c5554e83a3~tplv-t2oaga2asx-image.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="在这里插入图片描述"><br>视频的话也是同样的道理，我们再加上这几行代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/air&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.sendFile(path.join(__dirname, <span class="string">&#x27;public/lenveo.mp4&#x27;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>同样的我们用浏览器打开<a href="http://localhost:8083/air%E5%B0%B1%E8%83%BD%E8%AE%BF%E9%97%AE%E5%88%B0%E8%A7%86%E9%A2%91%E4%BA%86">http://localhost:8083/air就能访问到视频了</a><br><img "" class="lazyload placeholder" data-original="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/4/170a45c556c3894d~tplv-t2oaga2asx-image.image" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="在这里插入图片描述"><br>另外txt和pdf文件都是可以访问的，完整代码已上传至码云，需要的请点击<br><a href="https://gitee.com/liaoxiang123/local-server-node">完整代码</a><br>看到这里如果对你有帮助的话帮忙点个赞吧。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中watch的各种用法</title>
      <link href="/2021/07/21/Vue%E4%B8%ADwatch%E7%9A%84%E5%90%84%E7%A7%8D%E7%94%A8%E6%B3%95/"/>
      <url>/2021/07/21/Vue%E4%B8%ADwatch%E7%9A%84%E5%90%84%E7%A7%8D%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue2写法"><a href="#Vue2写法" class="headerlink" title="Vue2写法"></a>Vue2写法</h2><p>先初始化代码，需要监听data中的<code>msg</code>的变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>watch<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      data () &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">msg</span>: <span class="string">&#x27;hello vue&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="直接跟一个函数"><a href="#直接跟一个函数" class="headerlink" title="直接跟一个函数"></a>直接跟一个函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">msg</span>: <span class="string">&#x27;hello vue&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">watch</span>: &#123;</span><br><span class="line">        msg (newVal, oldVal) &#123;</span><br><span class="line">          <span class="comment">// newVal当前的值, oldVal变化前的值</span></span><br><span class="line">          <span class="built_in">console</span>.log(newVal, oldVal);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="写字符串的函数名"><a href="#写字符串的函数名" class="headerlink" title="写字符串的函数名"></a>写字符串的函数名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">     <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">     data () &#123;</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">msg</span>: <span class="string">&#x27;hello vue&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">watch</span>: &#123;</span><br><span class="line">       <span class="attr">msg</span>: <span class="string">&#x27;handleValueChange&#x27;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">methods</span>: &#123;</span><br><span class="line">       handleValueChange (newVal, oldVal) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(newVal, oldVal);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="handler-deep（侦听深层次的对象）"><a href="#handler-deep（侦听深层次的对象）" class="headerlink" title="handler + deep（侦听深层次的对象）"></a>handler + deep（侦听深层次的对象）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>: &#123;</span><br><span class="line">          <span class="attr">a</span>: &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;hello vue&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">      <span class="attr">msg</span>: &#123;</span><br><span class="line">        <span class="attr">handler</span>: <span class="string">&#x27;handleValueChange&#x27;</span>,</span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      handleValueChange (newVal, oldVal) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newVal.a.value, oldVal.a.value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="handler-immediate（页面加载完成就执行一次）"><a href="#handler-immediate（页面加载完成就执行一次）" class="headerlink" title="handler + immediate（页面加载完成就执行一次）"></a>handler + immediate（页面加载完成就执行一次）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>: &#123;</span><br><span class="line">          <span class="attr">a</span>: &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;hello vue&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">      <span class="attr">msg</span>: &#123;</span><br><span class="line">        <span class="attr">handler</span>: <span class="string">&#x27;handleValueChange&#x27;</span>,</span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      handleValueChange (newVal, oldVal) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newVal?.a.value, oldVal?.a.value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="跟一个数组写多个侦听函数"><a href="#跟一个数组写多个侦听函数" class="headerlink" title="跟一个数组写多个侦听函数"></a>跟一个数组写多个侦听函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">        <span class="attr">copyMsg</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">      <span class="attr">msg</span>: [&#123;</span><br><span class="line">        <span class="attr">handler</span>: <span class="string">&#x27;handleValueChange1&#x27;</span>,</span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;handleValueChange2&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newVal);</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      handleValueChange1 (newVal) &#123;</span><br><span class="line">        <span class="built_in">this</span>.copyMsg = newVal</span><br><span class="line">      &#125;,</span><br><span class="line">      handleValueChange2 (newVal, oldVal) &#123;</span><br><span class="line">        <span class="built_in">this</span>.copyMsg += <span class="string">&#x27;***&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="侦听对象的某个属性"><a href="#侦听对象的某个属性" class="headerlink" title="侦听对象的某个属性"></a>侦听对象的某个属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>: &#123;</span><br><span class="line">          <span class="attr">a</span>: &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;msg.a.value&#x27;</span>: <span class="string">&#x27;handleValueChange&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      handleValueChange (newVal, oldVal) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newVal, oldVal)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue3-CompositionApi写法"><a href="#Vue3-CompositionApi写法" class="headerlink" title="Vue3 CompositionApi写法"></a>Vue3 CompositionApi写法</h2><h3 id="侦听ref类型的数据"><a href="#侦听ref类型的数据" class="headerlink" title="侦听ref类型的数据"></a>侦听ref类型的数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">     setup () &#123;</span><br><span class="line">       <span class="keyword">const</span> &#123; ref, reactive, watch &#125; = Vue;</span><br><span class="line">       <span class="keyword">const</span> msg = ref(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">       watch(msg, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(newVal, oldVal)</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">return</span> &#123; msg &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="侦听reactive类型的数据"><a href="#侦听reactive类型的数据" class="headerlink" title="侦听reactive类型的数据"></a>侦听reactive类型的数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">     setup () &#123;</span><br><span class="line">       <span class="keyword">const</span> &#123; ref, reactive, watch &#125; = Vue;</span><br><span class="line">       <span class="keyword">const</span> msg = reactive(&#123;<span class="attr">value</span>: <span class="string">&#x27;hello&#x27;</span>&#125;)</span><br><span class="line">       watch(<span class="function">() =&gt;</span> msg.value, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(newVal, oldVal)</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">return</span> &#123; msg &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="侦听多个数据"><a href="#侦听多个数据" class="headerlink" title="侦听多个数据"></a>侦听多个数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">     setup () &#123;</span><br><span class="line">       <span class="keyword">const</span> &#123; ref, reactive, watch &#125; = Vue;</span><br><span class="line">       <span class="keyword">const</span> msg = reactive(&#123;<span class="attr">value</span>: <span class="string">&#x27;hello&#x27;</span>&#125;)</span><br><span class="line">       <span class="keyword">const</span> data = ref(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">       watch([<span class="function">() =&gt;</span> msg.value, data], <span class="function">(<span class="params">[currentMsg, currentData], [oldMsg, oldData]</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(currentMsg, currentData);</span><br><span class="line">         <span class="built_in">console</span>.log(oldMsg, oldData);</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">return</span> &#123; msg, data &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">    setup () &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; ref, reactive, watchEffect &#125; = Vue;</span><br><span class="line">      <span class="keyword">const</span> data = ref(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">      <span class="comment">// 页面初次渲染watchEffect就会执行一次，当内部所依赖的数据发生变化时则会再次执行</span></span><br><span class="line">      <span class="keyword">const</span> stop = watchEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.value);</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> &#123; data &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="停止对数据的侦听"><a href="#停止对数据的侦听" class="headerlink" title="停止对数据的侦听"></a>停止对数据的侦听</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">    setup () &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; ref, reactive, watchEffect &#125; = Vue;</span><br><span class="line">      <span class="keyword">const</span> data = ref(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">      <span class="comment">// 页面初次渲染watchEffect就会执行一次，当内部所依赖的数据发生变化时则会再次执行</span></span><br><span class="line">      <span class="keyword">const</span> stop = watchEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.value);</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 5秒后数据再怎么变化都不会触发，watch写法一致</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        stop()</span><br><span class="line">      &#125;, <span class="number">5000</span>)</span><br><span class="line">      <span class="keyword">return</span> &#123; data &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
